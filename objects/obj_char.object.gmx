<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>idle_right</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize Variables

//spriter_load("PlatformerPack/player_SmallHead.scml","Player",false);
//spriter_set_current_animation(self,"idle",0);

//current_anim = "idle";
//new_anim = "idle";
//blend = 0;


grav = 0.3;
hsp = 0;
hspCarry = 0;
vsp = 0;
jumpSpeed = 15;
moveSpeed = 7;
lastDirection = 1;

jump = false;
grounded = false;

keyDown = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
//TODO: jumping loop
//

//Get input from player
image_speed = 1;
keyRight = keyboard_check(vk_right);
keyLeft = -keyboard_check(vk_left);
keyJump = keyboard_check_pressed(vk_space);
keyJumpHeld = keyboard_check(vk_space);
keyDown = keyboard_check(vk_down);


//React to input
move = keyLeft + keyRight;
hsp = move * moveSpeed;
if(vsp &lt; 10) vsp += grav;

if (move &lt; 0){
    lastDirection = -1;
}
if (move &gt; 0){
    lastDirection = 1;
}

if(place_meeting(x,y+1,die)){
    sprite_index = death;
    game_restart();
}

//see if ground is below
if(place_meeting(x,y+5,obj_ground)){
    if(keyJump) vsp = -jumpSpeed;
    grounded = true;
    jump = false;
} else {
    grounded = false;
}


//see if right wall
if(place_meeting(x+1, y, obj_wall)){
    //if grounded display idle
    if(grounded){
        sprite_index = idle_right;
    }else{
    //wall slide
    }
    
}

//see if left wall
if(place_meeting(x-1,y,obj_wall)){
    //if grounded display idle
    if(grounded){
        sprite_index = idle_left;
    }else{
    //wall slide
    }
    
}

var hspFinal = hsp + hspCarry;
hspCarry = 0;

//horizontal collision
if(place_meeting(x+hspFinal, y, obj_wall)){
    while(!place_meeting(x+sign(hspFinal),y,obj_wall)){
        x += sign(hspFinal);
    }
    hspFinal = 0;
    hsp = 0;
}
x += hspFinal;

//vertical collision
if(place_meeting(x, y+vsp, obj_ground)){
    while(!place_meeting(x,y+sign(vsp),obj_ground)){
        y += sign(vsp);
    }
    vsp = 0;
}

if(place_meeting(x, y+vsp, obj_platform)){
    while(!place_meeting(x,y+sign(vsp),obj_platform)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//jumping

//On the ground or in the air
if (grounded){
    while (place_meeting(x,y,obj_ground)){
        y-=1;
    }
    if (hsp == 0){
        if(lastDirection == 1){
            sprite_index = idle_right;
        } else {
            sprite_index = idle_left;
        }
        if(lastDirection == 1 &amp;&amp; keyJump){
            jump = true;
            sprite_index = jump_right;
            image_index = 0;
            sprite_index = jump_right;
            if(image_index = image_number - 1){
                jump = false;
                sprite_index = fall_right;
            }
        }
        if(lastDirection == -1 &amp;&amp; keyJump) {
            jump = true;
            sprite_index = jump_left;
            image_index = 0;
            sprite_index = jump_left;
            if(image_index = image_number - 1){
                jump = false;
                sprite_index = fall_left;
            }
        }
    }else{
        if(move &lt; 0){
            sprite_index = run_left;
            image_speed = 2;
        } else if (move&gt;0){
            sprite_index = run_right;
            image_speed = 2;
        }
        if(keyRight &amp;&amp; keyJump){
            jump = true;
            sprite_index = jump_right;
            image_index = 0;
            sprite_index = jump_right;
            if(image_index = image_number - 1){
                sprite_index = fall_right;
                jump = false;
            }
        }
        if(keyLeft == -1 &amp;&amp; keyJump) {
            jump = true;
            sprite_index = jump_left;
            image_index = 0;
            sprite_index = jump_left;
            if(image_index = image_number - 1){
                jump = false;
                sprite_index = fall_left;
            }
        }
    }
}else {
    if (vspeed &gt; 0 &amp;&amp; sprite_index == jump_left){
        sprite_index = fall_left;
    } 
    if (vspeed &gt; 0 &amp;&amp; sprite_index == jump_right){
        sprite_index = fall_right;
    } 
    if (move &gt; 0 || lastDirection &gt; 0){
        if(jump == true){
            sprite_index = jump_right;
            if(sprite_index == jump_right &amp;&amp; image_index = image_number - 1){
                jump = false;
                sprite_index = fall_right;
            }
        }else{
            sprite_index = fall_right;
        }
    } 
    if (move &lt; 0 || lastDirection &lt; 0) {
        if(jump == true){
            sprite_index = jump_left;
            if(sprite_index == jump_left &amp;&amp; image_index = image_number - 1){
                jump = false;
                sprite_index = fall_left;
            }
        }else{
            sprite_index = fall_left;
        }
    }
}

if(vsp &lt; 0) &amp;&amp; (!keyJumpHeld) vsp = max(vsp, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
